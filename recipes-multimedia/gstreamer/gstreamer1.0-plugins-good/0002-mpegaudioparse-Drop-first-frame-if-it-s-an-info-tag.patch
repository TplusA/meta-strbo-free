From 4ac29dcabf677a28f27c13e6de6b4aea2704cb8c Mon Sep 17 00:00:00 2001
From: Robert Tiemann <rtie@gmx.de>
Date: Thu, 3 Sep 2015 13:24:22 +0200
Subject: [PATCH] mpegaudioparse: Drop first frame if it's an info tag.

---
 gst/audioparsers/gstmpegaudioparse.c | 17 +++++++++++++----
 1 file changed, 13 insertions(+), 4 deletions(-)

diff --git a/gst/audioparsers/gstmpegaudioparse.c b/gst/audioparsers/gstmpegaudioparse.c
index 5dbfd89f3..83ec8f79b 100644
--- a/gst/audioparsers/gstmpegaudioparse.c
+++ b/gst/audioparsers/gstmpegaudioparse.c
@@ -103,7 +103,7 @@ static gboolean gst_mpeg_audio_parse_convert (GstBaseParse * parse,
 static GstCaps *gst_mpeg_audio_parse_get_sink_caps (GstBaseParse * parse,
     GstCaps * filter);
 
-static void gst_mpeg_audio_parse_handle_first_frame (GstMpegAudioParse *
+static gboolean gst_mpeg_audio_parse_handle_first_frame (GstMpegAudioParse *
     mp3parse, GstBuffer * buf);
 
 #define gst_mpeg_audio_parse_parent_class parent_class
@@ -758,7 +758,10 @@ gst_mpeg_audio_parse_handle_frame (GstBaseParse * parse,
   mp3parse->hdr_bitrate = bitrate;
 
   /* For first frame; check for seek tables and output a codec tag */
-  gst_mpeg_audio_parse_handle_first_frame (mp3parse, buf);
+  if (gst_mpeg_audio_parse_handle_first_frame (mp3parse, buf))
+    frame->flags |= GST_BASE_PARSE_FRAME_FLAG_DROP;
+  else
+    frame->flags &= ~GST_BASE_PARSE_FRAME_FLAG_DROP;
 
   /* store some frame info for later processing */
   mp3parse->last_crc = crc;
@@ -774,7 +777,7 @@ cleanup:
   return GST_FLOW_OK;
 }
 
-static void
+static gboolean
 gst_mpeg_audio_parse_handle_first_frame (GstMpegAudioParse * mp3parse,
     GstBuffer * buf)
 {
@@ -789,9 +792,10 @@ gst_mpeg_audio_parse_handle_first_frame (GstMpegAudioParse * mp3parse,
   GstMapInfo map;
   guint8 *data;
   guint bitrate;
+  gboolean drop_this_frame = FALSE;
 
   if (mp3parse->sent_codec_tag)
-    return;
+    return FALSE;
 
   /* Check first frame for Xing info */
   if (mp3parse->version == 1) { /* MPEG-1 file */
@@ -1000,6 +1004,8 @@ gst_mpeg_audio_parse_handle_first_frame (GstMpegAudioParse * mp3parse,
       GST_DEBUG_OBJECT (mp3parse, "Encoder delay %u, encoder padding %u",
           encoder_delay, encoder_padding);
     }
+
+    drop_this_frame = TRUE;
   } else if (read_id_vbri == vbri_id) {
     gint64 total_bytes, total_frames;
     GstClockTime total_time;
@@ -1127,6 +1133,7 @@ gst_mpeg_audio_parse_handle_first_frame (GstMpegAudioParse * mp3parse,
       mp3parse->vbri_valid = FALSE;
     } else {
       mp3parse->vbri_valid = TRUE;
+      drop_this_frame = TRUE;
     }
   } else {
     GST_DEBUG_OBJECT (mp3parse,
@@ -1203,6 +1210,8 @@ gst_mpeg_audio_parse_handle_first_frame (GstMpegAudioParse * mp3parse,
 
 cleanup:
   gst_buffer_unmap (buf, &map);
+
+  return drop_this_frame;
 }
 
 static gboolean
-- 
2.17.1

