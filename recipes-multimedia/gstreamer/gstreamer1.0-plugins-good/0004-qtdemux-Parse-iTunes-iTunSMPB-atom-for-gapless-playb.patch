From f96ffc3ccb5d827523123a4329dafae8146a7b46 Mon Sep 17 00:00:00 2001
From: Robert Tiemann <rtie@gmx.de>
Date: Wed, 16 Sep 2015 18:00:51 +0200
Subject: [PATCH] qtdemux: Parse iTunes "iTunSMPB" atom for gapless playback.

---
 gst/isomp4/qtdemux.c | 95 +++++++++++++++++++++++++++++++++++++++++++-
 gst/isomp4/qtdemux.h |  5 +++
 2 files changed, 98 insertions(+), 2 deletions(-)

diff --git a/gst/isomp4/qtdemux.c b/gst/isomp4/qtdemux.c
index cf15fad46..ee14e4880 100644
--- a/gst/isomp4/qtdemux.c
+++ b/gst/isomp4/qtdemux.c
@@ -668,6 +668,9 @@ gst_qtdemux_init (GstQTDemux * qtdemux)
   qtdemux->adapter = gst_adapter_new ();
   g_queue_init (&qtdemux->protection_event_queue);
   qtdemux->flowcombiner = gst_flow_combiner_new ();
+  qtdemux->encoder_delay_samples = 0;
+  qtdemux->encoder_padding_samples = 0;
+  qtdemux->original_samples_count = 0;
   g_mutex_init (&qtdemux->expose_lock);
 
   qtdemux->active_streams = g_ptr_array_new_with_free_func
@@ -13517,6 +13520,79 @@ qtdemux_add_double_tag_from_str (GstQTDemux * demux, GstTagList * taglist,
   g_free (datacopy);
 }
 
+static guint64
+parse_hex_value (const char *string, size_t expected_length,
+    guint64 max_value, gboolean * failed)
+{
+  guint64 temp;
+  char *endptr;
+
+  if (*failed)
+    return 0;
+
+  errno = 0;
+  temp = g_ascii_strtoull (string, &endptr, 16);
+
+  if ((temp == G_MAXUINT64 && errno == ERANGE) ||
+      (temp == 0 && errno == EINVAL) ||
+      (endptr - string != expected_length) || temp > max_value) {
+    *failed = TRUE;
+    return 0;
+  }
+
+  return temp;
+}
+
+static gboolean
+parse_itunes_gapless_info (GstQTDemux * qtdemux, GNode * node)
+{
+  GNode *data;
+  guint32 len;
+  guint32 type;
+  gboolean failed;
+  const char *info_string;
+  size_t i;
+
+  data = qtdemux_tree_get_child_by_type (node, FOURCC_data);
+  if (!data) {
+    return FALSE;
+  }
+
+  len = QT_UINT32 (data->data);
+  type = QT_UINT32 ((guint8 *) data->data + 8);
+
+  if (len < 16 + 3 * (1 + 8) + (1 + 16) + 8 * (1 + 8) || type != 1) {
+    return FALSE;
+  }
+
+  len -= 16;
+  info_string = (char *) data->data + 16;
+
+  for (i = 0; i < 4 * (1 + 8); i += (1 + 8))
+    if (info_string[i] != ' ')
+      return FALSE;
+  if (info_string[4 * (1 + 8)] == ' ')
+    return FALSE;
+  for (i = 4 * (1 + 8) + (1 + 16); i < len; i += (1 + 8))
+    if (info_string[i] != ' ')
+      return FALSE;
+
+  failed = FALSE;
+  qtdemux->encoder_delay_samples =
+      parse_hex_value (&info_string[1 * (1 + 8) + 1], 8, G_MAXUINT32, &failed);
+  qtdemux->encoder_padding_samples =
+      parse_hex_value (&info_string[2 * (1 + 8) + 1], 8, G_MAXUINT32, &failed);
+  qtdemux->original_samples_count =
+      parse_hex_value (&info_string[3 * (1 + 8) + 1], 16, G_MAXUINT64, &failed);
+
+  if (failed) {
+    qtdemux->encoder_delay_samples = 0;
+    qtdemux->encoder_padding_samples = 0;
+    qtdemux->original_samples_count = 0;
+  }
+
+  return !failed;
+}
 
 static void
 qtdemux_tag_add_revdns (GstQTDemux * demux, GstTagList * taglist,
@@ -13623,8 +13699,23 @@ qtdemux_tag_add_revdns (GstQTDemux * demux, GstTagList * taglist,
         break;
       }
     }
-    if (i == G_N_ELEMENTS (tags))
-      goto unknown_tag;
+    if (i == G_N_ELEMENTS (tags)) {
+      if (!g_ascii_strncasecmp ("iTunSMPB", namestr, namesize)) {
+        if (parse_itunes_gapless_info (demux, node)) {
+          GST_DEBUG_OBJECT (demux,
+              "iTunes gapless: encoder delay %" G_GUINT32_FORMAT
+              ", padding %" G_GUINT32_FORMAT
+              ", original samples %" G_GUINT64_FORMAT,
+              demux->encoder_delay_samples, demux->encoder_padding_samples,
+              demux->original_samples_count);
+        } else {
+          GST_WARNING_OBJECT (demux, "Malformed iTunSMPB atom");
+          goto unknown_tag;
+        }
+      } else {
+        goto unknown_tag;
+      }
+    }
   } else {
     goto unknown_tag;
   }
diff --git a/gst/isomp4/qtdemux.h b/gst/isomp4/qtdemux.h
index 83a050a43..cb939caad 100644
--- a/gst/isomp4/qtdemux.h
+++ b/gst/isomp4/qtdemux.h
@@ -250,6 +250,11 @@ struct _GstQTDemux {
    * fields. */
   gboolean received_seek;
   gboolean first_moof_already_parsed;
+
+  /* gapless playback support */
+  guint encoder_delay_samples;
+  guint encoder_padding_samples;
+  guint64 original_samples_count;
 };
 
 struct _GstQTDemuxClass {
-- 
2.17.1

