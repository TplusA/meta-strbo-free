diff --git a/subprojects/gst-libav/ext/libav/gstavcfg.c b/subprojects/gst-libav/ext/libav/gstavcfg.c
index fc8c19c3be..d3deb12b7b 100644
--- a/subprojects/gst-libav/ext/libav/gstavcfg.c
+++ b/subprojects/gst-libav/ext/libav/gstavcfg.c
@@ -89,7 +89,7 @@ register_enum (const AVClass ** obj, const AVOption * top_opt)
 {
   const AVOption *opt = NULL;
   GType res = 0;
-  GArray *values = g_array_new (TRUE, TRUE, sizeof (GEnumValue));
+  GArray *values;
   gchar *lower_obj_name = g_ascii_strdown ((*obj)->class_name, -1);
   gchar *enum_name = g_strdup_printf ("%s-%s", lower_obj_name, top_opt->unit);
   gboolean none_default = TRUE;
@@ -108,6 +108,8 @@ register_enum (const AVClass ** obj, const AVOption * top_opt)
   if ((res = g_type_from_name (enum_name_strip)))
     goto done;
 
+  values = g_array_new (TRUE, TRUE, sizeof (GEnumValue));
+
   while ((opt = av_opt_next (obj, opt))) {
     if (opt->type == AV_OPT_TYPE_CONST && !g_strcmp0 (top_opt->unit, opt->unit)) {
       GEnumValue val;
@@ -169,6 +171,10 @@ register_enum (const AVClass ** obj, const AVOption * top_opt)
         &g_array_index (values, GEnumValue, 0));
 
     gst_type_mark_as_plugin_api (res, 0);
+
+    g_array_free (values, FALSE);
+  } else {
+    g_array_free (values, TRUE);
   }
 
 done:
@@ -190,7 +196,7 @@ register_flags (const AVClass ** obj, const AVOption * top_opt)
 {
   const AVOption *opt = NULL;
   GType res = 0;
-  GArray *values = g_array_new (TRUE, TRUE, sizeof (GEnumValue));
+  GArray *values;
   gchar *lower_obj_name = g_ascii_strdown ((*obj)->class_name, -1);
   gchar *flags_name = g_strdup_printf ("%s-%s", lower_obj_name, top_opt->unit);
   const gchar *flags_name_strip;
@@ -208,6 +214,8 @@ register_flags (const AVClass ** obj, const AVOption * top_opt)
   if ((res = g_type_from_name (flags_name_strip)))
     goto done;
 
+  values = g_array_new (TRUE, TRUE, sizeof (GFlagsValue));
+
   while ((opt = av_opt_next (obj, opt))) {
     if (opt->type == AV_OPT_TYPE_CONST && !g_strcmp0 (top_opt->unit, opt->unit)) {
       GFlagsValue val;
@@ -240,7 +248,9 @@ register_flags (const AVClass ** obj, const AVOption * top_opt)
             GFlagsValue, 0));
 
     gst_type_mark_as_plugin_api (res, 0);
-  }
+    g_array_free (values, FALSE);
+  } else
+    g_array_free (values, TRUE);
 
 done:
   g_free (lower_obj_name);
diff --git a/subprojects/gst-libav/ext/libav/gstavviddec.c b/subprojects/gst-libav/ext/libav/gstavviddec.c
index b00a20ced9..f156a1145e 100644
--- a/subprojects/gst-libav/ext/libav/gstavviddec.c
+++ b/subprojects/gst-libav/ext/libav/gstavviddec.c
@@ -666,16 +666,20 @@ update_state:
     gst_video_codec_state_unref (ffmpegdec->input_state);
   ffmpegdec->input_state = gst_video_codec_state_ref (state);
 
-  if (ffmpegdec->input_state->info.fps_n) {
-    GstVideoInfo *info = &ffmpegdec->input_state->info;
+  /* Use the framerate values stored in the decoder for calculating latency. The
+   * upstream framerate might not be set but we still want to report a latency
+   * if needed. */
+  if (ffmpegdec->context->time_base.den && ffmpegdec->context->ticks_per_frame) {
+    gint fps_n =
+        ffmpegdec->context->time_base.den / ffmpegdec->context->ticks_per_frame;
+    gint fps_d = ffmpegdec->context->time_base.num;
     latency = gst_util_uint64_scale_ceil (
-        (ffmpegdec->context->has_b_frames) * GST_SECOND, info->fps_d,
-        info->fps_n);
+        (ffmpegdec->context->has_b_frames) * GST_SECOND, fps_d, fps_n);
 
     if (ffmpegdec->context->thread_type & FF_THREAD_FRAME) {
       latency +=
           gst_util_uint64_scale_ceil (ffmpegdec->context->thread_count *
-          GST_SECOND, info->fps_d, info->fps_n);
+          GST_SECOND, fps_d, fps_n);
     }
   }
 
@@ -1453,8 +1457,7 @@ gst_ffmpegviddec_negotiate (GstFFMpegVidDec * ffmpegdec,
   }
 
   /* try to find a good framerate */
-  if ((in_info->fps_d && in_info->fps_n) ||
-      GST_VIDEO_INFO_FLAG_IS_SET (in_info, GST_VIDEO_FLAG_VARIABLE_FPS)) {
+  if ((in_info->fps_d && in_info->fps_n)) {
     /* take framerate from input when it was specified (#313970) */
     fps_n = in_info->fps_n;
     fps_d = in_info->fps_d;
@@ -1475,9 +1478,16 @@ gst_ffmpegviddec_negotiate (GstFFMpegVidDec * ffmpegdec,
     }
   }
 
-  GST_LOG_OBJECT (ffmpegdec, "setting framerate: %d/%d", fps_n, fps_d);
-  out_info->fps_n = fps_n;
-  out_info->fps_d = fps_d;
+  if (GST_VIDEO_INFO_FLAG_IS_SET (in_info, GST_VIDEO_FLAG_VARIABLE_FPS)) {
+    GST_LOG_OBJECT (ffmpegdec, "setting framerate: %d/%d", in_info->fps_n,
+        in_info->fps_d);
+    out_info->fps_n = in_info->fps_n;
+    out_info->fps_d = in_info->fps_d;
+  } else {
+    GST_LOG_OBJECT (ffmpegdec, "setting framerate: %d/%d", fps_n, fps_d);
+    out_info->fps_n = fps_n;
+    out_info->fps_d = fps_d;
+  }
 
   /* calculate and update par now */
   gst_ffmpegviddec_update_par (ffmpegdec, in_info, out_info);
diff --git a/subprojects/gst-libav/ext/libav/gstavvidenc.c b/subprojects/gst-libav/ext/libav/gstavvidenc.c
index 2ed9e5ae64..4a5b14c43d 100644
--- a/subprojects/gst-libav/ext/libav/gstavvidenc.c
+++ b/subprojects/gst-libav/ext/libav/gstavvidenc.c
@@ -226,6 +226,7 @@ gst_ffmpegvidenc_finalize (GObject * object)
   gst_ffmpeg_avcodec_close (ffmpegenc->refcontext);
   av_freep (&ffmpegenc->context);
   av_freep (&ffmpegenc->refcontext);
+  g_free (ffmpegenc->filename);
 
   G_OBJECT_CLASS (parent_class)->finalize (object);
 }
@@ -672,6 +673,7 @@ gst_ffmpegvidenc_receive_packet (GstFFMpegVidEnc * ffmpegenc,
     g_slice_free (AVPacket, pkt);
     goto done;
   } else if (res == AVERROR_EOF) {
+    g_slice_free (AVPacket, pkt);
     ret = GST_FLOW_EOS;
     goto done;
   } else if (res < 0) {
diff --git a/subprojects/gst-libav/meson.build b/subprojects/gst-libav/meson.build
index c9eccff2a2..c53c69951c 100644
--- a/subprojects/gst-libav/meson.build
+++ b/subprojects/gst-libav/meson.build
@@ -1,5 +1,5 @@
 project('gst-libav', 'c',
-  version : '1.21.2',
+  version : '1.21.2.1',
   meson_version : '>= 0.62',
   default_options : [ 'warning_level=1',
                       'buildtype=debugoptimized' ])
